width <- dim(test_pic)[1]
height <- dim(test_pic)[2]
x_start <- seq(1, width, blockSize)
x_start <- x_start[x_start <= width]
x_end <- x_start + blockSize - 1
x_end[x_end > width] <- width
y_start <- seq(1, height, blockSize)
y_start <- y_start[y_start <= height]
y_end <- y_start + blockSize - 1
y_end[y_end > height] <- height
finim <- test_pic
appleii <- jsonlite::fromJSON("test/rgb/appleii.json", flatten=TRUE)
pal_collection <- list(appleii = appleii)
color_dist <- function(a_vec, b_vec) {
sum((a_vec - b_vec)^2)
}
get_closest_color <- function(ch1, ch2, ch3, pal) {
t_mat <- pal_collection[[pal]] / 255
o_vec <- c(ch1, ch2, ch3)
index <- which.min(apply(t_mat, 1, color_dist, b_vec = o_vec))[1]
t_mat[index,]
}
finmat <- matrix(rep(0, 3 * length(x_start) * length(y_start)), ncol = 3)
finim <- array(rep(0, width * height * 3), dim = c(width, height, 3))
for (i in 1:length(x_start)) {
for (j in 1:length(y_start)) {
subim <- test_pic[x_start[i]:x_end[i], y_start[j]:y_end[j], 1, 1:3, drop = FALSE]
ch1 <- mean(subim[,,,1])
ch2 <- mean(subim[,,,2])
ch3 <- mean(subim[,,,3])
rescol <- get_closest_color(ch1, ch2, ch3, pal)
# finmat[(i - 1) * length(y_start) + j,] <- rescol
finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 1] <- rescol[1]
finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 2] <- rescol[2]
finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 3] <- rescol[3]
}
}
# for (i in 1:length(x_start)) {
#   for (j in 1:length(y_start)) {
#
#     finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 1] <- finmat[(i - 1) * length(y_start) + j, 1]
#     finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 2] <- finmat[(i - 1) * length(y_start) + j, 2]
#     finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 3] <- finmat[(i - 1) * length(y_start) + j, 3]
#
#   }
# }
time2 <- Sys.time()
time2 - time1
plot(as.cimg(finim))
test_pic <- imager::load.image("test/test.jpg")
time1 <- Sys.time()
blockSize <- 1
pal <- "appleii"
width <- dim(test_pic)[1]
height <- dim(test_pic)[2]
x_start <- seq(1, width, blockSize)
x_start <- x_start[x_start <= width]
x_end <- x_start + blockSize - 1
x_end[x_end > width] <- width
y_start <- seq(1, height, blockSize)
y_start <- y_start[y_start <= height]
y_end <- y_start + blockSize - 1
y_end[y_end > height] <- height
finim <- test_pic
appleii <- jsonlite::fromJSON("test/rgb/appleii.json", flatten=TRUE)
pal_collection <- list(appleii = appleii)
color_dist <- function(a_vec, b_vec) {
sum((a_vec - b_vec)^2)
}
get_closest_color <- function(ch1, ch2, ch3, pal) {
t_mat <- pal_collection[[pal]] / 255
o_vec <- c(ch1, ch2, ch3)
index <- which.min(apply(t_mat, 1, color_dist, b_vec = o_vec))[1]
t_mat[index,]
}
finmat <- matrix(rep(0, 3 * length(x_start) * length(y_start)), ncol = 3)
finim <- array(rep(0, width * height * 3), dim = c(width, height, 3))
for (i in 1:length(x_start)) {
for (j in 1:length(y_start)) {
subim <- test_pic[x_start[i]:x_end[i], y_start[j]:y_end[j], 1, 1:3, drop = FALSE]
ch1 <- mean(subim[,,,1])
ch2 <- mean(subim[,,,2])
ch3 <- mean(subim[,,,3])
rescol <- get_closest_color(ch1, ch2, ch3, pal)
finmat[(i - 1) * length(y_start) + j,] <- rescol
# finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 1] <- rescol[1]
# finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 2] <- rescol[2]
# finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 3] <- rescol[3]
}
}
for (i in 1:length(x_start)) {
for (j in 1:length(y_start)) {
finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 1] <- finmat[(i - 1) * length(y_start) + j, 1]
finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 2] <- finmat[(i - 1) * length(y_start) + j, 2]
finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 3] <- finmat[(i - 1) * length(y_start) + j, 3]
}
}
time2 <- Sys.time()
time2 - time1
plot(as.cimg(finim))
test_pic <- imager::load.image("test/test.jpg")
time1 <- Sys.time()
blockSize <- 1
pal <- "appleii"
width <- dim(test_pic)[1]
height <- dim(test_pic)[2]
x_start <- seq(1, width, blockSize)
x_start <- x_start[x_start <= width]
x_end <- x_start + blockSize - 1
x_end[x_end > width] <- width
y_start <- seq(1, height, blockSize)
y_start <- y_start[y_start <= height]
y_end <- y_start + blockSize - 1
y_end[y_end > height] <- height
finim <- test_pic
appleii <- jsonlite::fromJSON("test/rgb/appleii.json", flatten=TRUE)
pal_collection <- list(appleii = appleii)
color_dist <- function(a_vec, b_vec) {
sum((a_vec - b_vec)^2)
}
get_closest_color <- function(o_vec, pal) {
t_mat <- pal_collection[[pal]] / 255
index <- which.min(apply(t_mat, 1, color_dist, b_vec = o_vec))[1]
t_mat[index,]
}
finmat <- matrix(rep(0, 3 * length(x_start) * length(y_start)), ncol = 3)
finim <- array(rep(0, width * height * 3), dim = c(width, height, 3))
for (i in 1:length(x_start)) {
for (j in 1:length(y_start)) {
subim <- test_pic[x_start[i]:x_end[i], y_start[j]:y_end[j], 1, 1:3, drop = FALSE]
ch1 <- mean(subim[,,,1])
ch2 <- mean(subim[,,,2])
ch3 <- mean(subim[,,,3])
rescol <- get_closest_color(c(ch1, ch2, ch3), pal)
finmat[(i - 1) * length(y_start) + j,] <- rescol
}
}
# TODO: optimize this part
for (i in 1:length(x_start)) {
for (j in 1:length(y_start)) {
finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 1] <- finmat[(i - 1) * length(y_start) + j, 1]
finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 2] <- finmat[(i - 1) * length(y_start) + j, 2]
finim[x_start[i]:x_end[i], y_start[j]:y_end[j], 3] <- finmat[(i - 1) * length(y_start) + j, 3]
}
}
time2 <- Sys.time()
time2 - time1
plot(as.cimg(finim))
test_pic <- imager::load.image("test/test.jpg")
time1 <- Sys.time()
blockSize <- 2
pal <- "appleii"
width <- dim(test_pic)[1]
height <- dim(test_pic)[2]
x_start <- seq(1, width, blockSize)
x_start <- x_start[x_start <= width]
x_end <- x_start + blockSize - 1
x_end[x_end > width] <- width
y_start <- seq(1, height, blockSize)
y_start <- y_start[y_start <= height]
y_end <- y_start + blockSize - 1
y_end[y_end > height] <- height
finim <- test_pic
appleii <- jsonlite::fromJSON("test/rgb/appleii.json", flatten=TRUE)
pal_collection <- list(appleii = appleii)
color_dist <- function(a_vec, b_vec) {
sum((a_vec - b_vec)^2)
}
get_closest_color <- function(o_vec, pal) {
t_mat <- pal_collection[[pal]] / 255
index <- which.min(apply(t_mat, 1, color_dist, b_vec = o_vec))[1]
t_mat[index,]
}
finmat <- matrix(rep(0, 3 * length(x_start) * length(y_start)), ncol = 3)
finim <- array(rep(0, width * height * 3), dim = c(width, height, 3))
for (i in 1:length(x_start)) {
for (j in 1:length(y_start)) {
subim <- test_pic[x_start[i]:x_end[i],
y_start[j]:y_end[j],
1,
1:3,
drop = FALSE]
ch1 <- mean(subim[,,,1])
ch2 <- mean(subim[,,,2])
ch3 <- mean(subim[,,,3])
rescol <- get_closest_color(c(ch1, ch2, ch3), pal)
finmat[(i - 1) * length(y_start) + j,] <- rescol
}
}
# TODO: optimize this part
for (i in 1:length(x_start)) {
for (j in 1:length(y_start)) {
index <- (i - 1) * length(y_start) + j
c_x <- x_start[i]:x_end[i]
c_y <- y_start[j]:y_end[j]
finim[c_x, c_y, 1] <- finmat[index, 1]
finim[c_x, c_y, 2] <- finmat[index, 2]
finim[c_x, c_y, 3] <- finmat[index, 3]
}
}
time2 <- Sys.time()
time2 - time1
dim(finim) <- c(width, height, 1, 3)
plot(as.cimg(finim))
test_pic <- imager::load.image("test/test.jpg")
time1 <- Sys.time()
blockSize <- 4
pal <- "appleii"
width <- dim(test_pic)[1]
height <- dim(test_pic)[2]
x_start <- seq(1, width, blockSize)
x_start <- x_start[x_start <= width]
x_end <- x_start + blockSize - 1
x_end[x_end > width] <- width
y_start <- seq(1, height, blockSize)
y_start <- y_start[y_start <= height]
y_end <- y_start + blockSize - 1
y_end[y_end > height] <- height
finim <- test_pic
appleii <- jsonlite::fromJSON("test/rgb/appleii.json", flatten=TRUE)
pal_collection <- list(appleii = appleii)
color_dist <- function(a_vec, b_vec) {
sum((a_vec - b_vec)^2)
}
get_closest_color <- function(o_vec, pal) {
t_mat <- pal_collection[[pal]] / 255
index <- which.min(apply(t_mat, 1, color_dist, b_vec = o_vec))[1]
t_mat[index,]
}
finmat <- matrix(rep(0, 3 * length(x_start) * length(y_start)), ncol = 3)
finim <- array(rep(0, width * height * 3), dim = c(width, height, 3))
for (i in 1:length(x_start)) {
for (j in 1:length(y_start)) {
subim <- test_pic[x_start[i]:x_end[i],
y_start[j]:y_end[j],
1,
1:3,
drop = FALSE]
ch1 <- mean(subim[,,,1])
ch2 <- mean(subim[,,,2])
ch3 <- mean(subim[,,,3])
rescol <- get_closest_color(c(ch1, ch2, ch3), pal)
finmat[(i - 1) * length(y_start) + j,] <- rescol
}
}
# TODO: optimize this part
for (i in 1:length(x_start)) {
for (j in 1:length(y_start)) {
index <- (i - 1) * length(y_start) + j
c_x <- x_start[i]:x_end[i]
c_y <- y_start[j]:y_end[j]
finim[c_x, c_y, 1] <- finmat[index, 1]
finim[c_x, c_y, 2] <- finmat[index, 2]
finim[c_x, c_y, 3] <- finmat[index, 3]
}
}
dim(finim) <- c(width, height, 1, 3)
time2 <- Sys.time()
time2 - time1
plot(as.cimg(finim))
appleii <- jsonlite::fromJSON("test/rgb/appleii.json", flatten=TRUE)
atari2600 <- jsonlite::fromJSON("test/rgb/atari2600.json", flatten=TRUE)
commodore64 <- jsonlite::fromJSON("test/rgb/commodore64.json", flatten=TRUE)
contra <- jsonlite::fromJSON("test/rgb/contra.json", flatten=TRUE)
gameboy <- jsonlite::fromJSON("test/rgb/gameboy.json", flatten=TRUE)
grayscale <- jsonlite::fromJSON("test/rgb/grayscale.json", flatten=TRUE)
hyrule <- jsonlite::fromJSON("test/rgb/hyrule.json", flatten=TRUE)
intellivision <- jsonlite::fromJSON("test/rgb/intellivision.json", flatten=TRUE)
kungfu <- jsonlite::fromJSON("test/rgb/kungfu.json", flatten=TRUE)
mario <- jsonlite::fromJSON("test/rgb/mario.json", flatten=TRUE)
nes <- jsonlite::fromJSON("test/rgb/nes.json", flatten=TRUE)
sega <- jsonlite::fromJSON("test/rgb/sega.json", flatten=TRUE)
tetris <- jsonlite::fromJSON("test/rgb/tetris.json", flatten=TRUE)
appleii <- jsonlite::fromJSON("test/rgb/appleii.json", flatten=TRUE)
atari2600 <- jsonlite::fromJSON("test/rgb/atari2600.json", flatten=TRUE)
commodore64 <- jsonlite::fromJSON("test/rgb/commodore64.json", flatten=TRUE)
contra <- jsonlite::fromJSON("test/rgb/contra.json", flatten=TRUE)
gameboy <- jsonlite::fromJSON("test/rgb/gameboy.json", flatten=TRUE)
grayscale <- jsonlite::fromJSON("test/rgb/grayscale.json", flatten=TRUE)
hyrule <- jsonlite::fromJSON("test/rgb/hyrule.json", flatten=TRUE)
intellivision <- jsonlite::fromJSON("test/rgb/intellivision.json", flatten=TRUE)
kungfu <- jsonlite::fromJSON("test/rgb/kungfu.json", flatten=TRUE)
mario <- jsonlite::fromJSON("test/rgb/mario.json", flatten=TRUE)
nes <- jsonlite::fromJSON("test/rgb/nes.json", flatten=TRUE)
sega <- jsonlite::fromJSON("test/rgb/sega.json", flatten=TRUE)
tetris <- jsonlite::fromJSON("test/rgb/tetris.json", flatten=TRUE)
pal_collection <- list(appleii = appleii,
atari2600 = atari2600,
commodore64 = commodore64,
contra = contra,
gameboy = gameboy,
grayscale = grayscale,
hyrule = hyrule,
intellivision = intellivision,
kungfu = kungfu,
mario = mario,
nes = nes,
sega = sega,
tetris = tetris)
pal_collection
use_data(pal_collection)
class(test_pic)
ori_pic <- imager::load.image("test/test.jpg")
class(ori_pic)
library(devtools)
load_all()
pal_collection
test_pic <- imager::load.image("test/test.jpg")
imtopix(test_pic)
class(test_pic)
imager::is.cimg(test_pic)
load_all()
imtopix(test_pic)
imtopix(test_pic) -> out_pic
plot(out_pic)
imtopix(test_pic, pal = "contra") -> out_pic
plot(out_pic)
imtopix(test_pic, pal = "contra") -> out_pic
plot(out_pic)
imager::load.image("test/4.png")
imager::load.image("test/4.png") -> test_pic
plot(test_pic)
test_pic[,,,4]
imtopix(test_pic, pal = "contra") -> out_pic
plot(out_pic)
load_all()
imtopix(test_pic, pal = "contra") -> out_pic
load_all()
imtopix(test_pic, pal = "contra") -> out_pic
imager::load.image("test/test.jpg") -> test_pic
imtopix(test_pic, pal = "contra") -> out_pic
load_all()
imtopix(test_pic, pal = "contra") -> out_pic
load_all()
imtopix(test_pic, pal = "contra") -> out_pic
load_all()
imtopix(test_pic, pal = "contra") -> out_pic
plot(out_pic)
imager::load.image("test/4.png") -> test_pic
imtopix(test_pic, pal = "contra") -> out_pic
plot(out_pic)
out_pic
out_pic <- out_pic[,,,1:3]
out_pic
out_pic <- as.cimg(out_pic)
plot(out_pic)
load_all()
imtopix(test_pic, pal = "contra") -> out_pic
plot(out_pic)
imtopix(test_pic, pal = "contra", blockSize = 4) -> out_pic
plot(out_pic)
list.dirs("test")
list.dirs("test/rgb")
?list.dirs
list.files("test/rgb")
list.files("test")
file_names <- list.files("test")
file_names <- list.files("test")
for (filename in file_names) {
imager::load.image(filename) -> test_pic
imtopix(test_pic, pal = "contra") -> out_pic
imager::save.image(parrots,"/test/out1.jpeg")
}
file_names
file_names <- list.files("test")
for (filename in file_names) {
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "contra") -> out_pic
imager::save.image(parrots,"/test/out1.jpeg")
}
file_names <- list.files("test")
for (filename in file_names) {
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "contra") -> out_pic
imager::save.image(out_pic,"/test/out1.jpeg")
}
out_pic
imager::save.image(out_pic,"/test/out1.jpeg")
imager::save.image(out_pic,"out1.jpeg")
imager::save.image(out_pic,"test/out1.jpeg")
file_names <- list.files("test")
for (filename in file_names) {
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "contra") -> out_pic
imager::save.image(out_pic, paste0("test/", filename, "_out.jpeg"))
}
file_names <- list.files("test")
file_names
file_names <- list.files("test")
i <- 1
for (filename in file_names) {
i <- i + 1
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "contra") -> out_pic
imager::save.image(out_pic, paste0("test/", i, "_out.jpeg"))
}
file_names <- list.files("test")
i <- 1
for (filename in file_names) {
i <- i + 1
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "contra", blockSize = 4) -> out_pic
imager::save.image(out_pic, paste0("test/", i, "_out.jpeg"))
}
file_names <- list.files("test")
i <- 1
for (filename in file_names) {
i <- i + 1
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "contra", blockSize = 4) -> out_pic
imager::save.image(out_pic, paste0("test/", i, "_out.jpeg"))
}
file_names <- list.files("test")
i <- 1
for (filename in file_names) {
i <- i + 1
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "gameboy", blockSize = 4) -> out_pic
imager::save.image(out_pic, paste0("test/", i, "_out.jpeg"))
}
load_all()
file_names <- list.files("test")
i <- 1
for (filename in file_names) {
i <- i + 1
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "gameboy", blockSize = 4) -> out_pic
imager::save.image(out_pic, paste0("test/", i, "_out.jpeg"))
}
load_all()
file_names <- list.files("test")
i <- 1
for (filename in file_names) {
i <- i + 1
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "gameboy", blockSize = 4) -> out_pic
imager::save.image(out_pic, paste0("test/", i, "_out.jpeg"))
}
file_names <- list.files("test")
i <- 1
for (filename in file_names) {
i <- i + 1
tim1 <- Sys.time()
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "gameboy", blockSize = 4) -> out_pic
imager::save.image(out_pic, paste0("test/", i, "_out.jpeg"))
print(Sys.time() - tim1)
}
file_names <- list.files("test")
i <- 1
for (filename in file_names) {
i <- i + 1
tim1 <- Sys.time()
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "gameboy", blockSize = 4) -> out_pic
imager::save.image(out_pic, paste0("test/", i, "_out.png"))
print(Sys.time() - tim1)
}
file_names <- list.files("test")
i <- 1
for (filename in file_names) {
i <- i + 1
tim1 <- Sys.time()
imager::load.image(paste0("test/",filename)) -> test_pic
imtopix(test_pic, pal = "gameboy", blockSize = 1) -> out_pic
imager::save.image(out_pic, paste0("test/", i, "_out.png"))
print(Sys.time() - tim1)
}
document()
document()
load_all()
?im2pix::imtopix()
document()
?im2pix::imtopix()
document()
?im2pix::imtopix()
document()
?im2pix::imtopix()
document()
?im2pix::imtopix()
document()
document()
?im2pix::imtopix()
document()
?im2pix::imtopix()
build()
install()
check()
check()
use_mit_license()
use_package("imager")
packageVersion("imager")
library(available)
available("im2pix")
check()
sample_im <- imager::load.image("sample.jpg")
use_data(sample_im)
check()
document()
document()
check()
document()
?imtopix
check()
?use_github_action
use_github_actions_badge()
build()
install()
use_github_actions_badge()
use_github_actions()
plot(sample_im)
plot(sample_im)
